{
    "day": 4,
    "title": "Strings",
    "content": {
        "tag": "root",
        "children": [
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Day 4 - Strings"
                    }
                ]
            },
            
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "img",
                        "attributes": {
                            "alt": "30DaysOfPython",
                            "src": "../images/30DaysOfPython_banner3@2x.png"
                        }
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#day-4"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ“˜ Day 4"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#strings"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Strings"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#creating-a-string"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Creating a String"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#string-concatenation"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "String Concatenation"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#escape-sequences-in-strings"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Escape Sequences in Strings"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#string-formatting"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "String formatting"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#old-style-string-formatting--operator"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Old Style String Formatting (% Operator)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#new-style-string-formatting-strformat"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "New Style String Formatting (str.format)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#string-interpolation--f-strings-python-36"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "String Interpolation / f-Strings (Python 3.6+)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#python-strings-as-sequences-of-characters"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Python Strings as Sequences of Characters"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#unpacking-characters"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Unpacking Characters"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#accessing-characters-in-strings-by-index"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Accessing Characters in Strings by Index"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#slicing-python-strings"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Slicing Python Strings"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#reversing-a-string"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Reversing a String"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#skipping-characters-while-slicing"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Skipping Characters While Slicing"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#string-methods"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "String Methods"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#-exercises---day-4"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ’» Exercises - Day 4"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {
                    "id": "day-4"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ“˜ Day 4"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "strings"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Strings"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Text is a string data type. Any data type written as text is a string. Any data under single, double or triple quote are strings. There are different string methods and built-in functions to deal with string data types. To check the length of a string use the len() method."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "creating-a-string"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Creating a String"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "letter = 'P'                # A string could be a single character or a bunch of texts\nprint(letter)               # P\nprint(len(letter))          # 1\ngreeting = 'Hello, World!'  # String could be made using a single or double quote,\"Hello, World!\"\nprint(greeting)             # Hello, World!\nprint(len(greeting))        # 13\nsentence = \"I hope you are enjoying 30 days of Python Challenge\"\nprint(sentence)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Multiline string is created by using triple single (''') or triple double quotes (\"\"\"). See the example below."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "multiline_string = '''I am a teacher and enjoy teaching.\nI didn't find anything as rewarding as empowering people.\nThat is why I created 30 days of python.'''\nprint(multiline_string)\n\n# Another way of doing the same thing\nmultiline_string = \"\"\"I am a teacher and enjoy teaching.\nI didn't find anything as rewarding as empowering people.\nThat is why I created 30 days of python.\"\"\"\nprint(multiline_string)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "string-concatenation"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "String Concatenation"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "We can connect strings together. Merging or connecting strings is called concatenation. See the example below:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "first_name = 'Asabeneh'\nlast_name = 'Yetayeh'\nspace = ' '\nfull_name = first_name  +  space + last_name\nprint(full_name) # Asabeneh Yetayeh\n# Checking the length of a string using len() built-in function\nprint(len(first_name))  # 8\nprint(len(last_name))   # 7\nprint(len(first_name) > len(last_name)) # True\nprint(len(full_name)) # 16"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "escape-sequences-in-strings"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Escape Sequences in Strings"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In Python and other programming languages \\ followed by a character is an escape sequence. Let us see the most common escape characters:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\n: new line"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\t: Tab means(8 spaces)"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\\\: Back slash"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\': Single quote (')"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\\": Double quote (\")"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Now, let us see the use of the above escape sequences with examples."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "print('I hope everyone is enjoying the Python Challenge.\\nAre you ?') # line break\nprint('Days\\tTopics\\tExercises') # adding tab space or 4 spaces \nprint('Day 1\\t5\\t5')\nprint('Day 2\\t6\\t20')\nprint('Day 3\\t5\\t23')\nprint('Day 4\\t1\\t35')\nprint('This is a backslash  symbol (\\\\)') # To write a backslash\nprint('In every programming language it starts with \\\"Hello, World!\\\"') # to write a double quote inside a single quote\n\n# output\nI hope every one is enjoying the Python Challenge.\nAre you ?\nDays    Topics  Exercises\nDay 1   5       5\nDay 2   6       20\nDay 3   5       23\nDay 4   1       35\nThis is a backslash  symbol (\\)\nIn every programming language it starts with \"Hello, World!\""
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "string-formatting"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "String formatting"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "old-style-string-formatting-operator"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Old Style String Formatting (% Operator)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In Python there are many ways of formatting strings. In this section, we will cover some of them.\nThe \"%\" operator is used to format a set of variables enclosed in a \"tuple\" (a fixed size list), together with a format string, which contains normal text together with \"argument specifiers\", special symbols like \"%s\", \"%d\", \"%f\", \"%."
                    },
                    {
                        "type": "Element",
                        "tagName": "small",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "number of digits"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "f\"."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "%s - String (or any object with a string representation, like numbers)"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "%d - Integers"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "%f - Floating point numbers"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\"%."
                            },
                            {
                                "type": "Element",
                                "tagName": "small",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "number of digits"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "f\" - Floating point numbers with fixed precision"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# Strings only\nfirst_name = 'Asabeneh'\nlast_name = 'Yetayeh'\nlanguage = 'Python'\nformated_string = 'I am %s %s. I teach %s' %(first_name, last_name, language)\nprint(formated_string)\n\n# Strings  and numbers\nradius = 10\npi = 3.14\narea = pi * radius ** 2\nformated_string = 'The area of circle with a radius %d is %.2f.' %(radius, area) # 2 refers the 2 significant digits after the point\n\npython_libraries = ['Django', 'Flask', 'NumPy', 'Matplotlib','Pandas']\nformated_string = 'The following are python libraries:%s' % (python_libraries)\nprint(formated_string) # \"The following are python libraries:['Django', 'Flask', 'NumPy', 'Matplotlib','Pandas']\""
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "new-style-string-formatting-strformat"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "New Style String Formatting (str.format)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "This formatting is introduced in Python version 3."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "first_name = 'Asabeneh'\nlast_name = 'Yetayeh'\nlanguage = 'Python'\nformated_string = 'I am {} {}. I teach {}'.format(first_name, last_name, language)\nprint(formated_string)\na = 4\nb = 3\n\nprint('{} + {} = {}'.format(a, b, a + b))\nprint('{} - {} = {}'.format(a, b, a - b))\nprint('{} * {} = {}'.format(a, b, a * b))\nprint('{} / {} = {:.2f}'.format(a, b, a / b)) # limits it to two digits after decimal\nprint('{} % {} = {}'.format(a, b, a % b))\nprint('{} // {} = {}'.format(a, b, a // b))\nprint('{} ** {} = {}'.format(a, b, a ** b))\n\n# output\n4 + 3 = 7\n4 - 3 = 1\n4 * 3 = 12\n4 / 3 = 1.33\n4 % 3 = 1\n4 // 3 = 1\n4 ** 3 = 64\n\n# Strings  and numbers\nradius = 10\npi = 3.14\narea = pi * radius ** 2\nformated_string = 'The area of a circle with a radius {} is {:.2f}.'.format(radius, area) # 2 digits after decimal\nprint(formated_string)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "string-interpolation-f-strings-python-36"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "String Interpolation / f-Strings (Python 3.6+)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Another new string formatting is string interpolation, f-strings. Strings start with f and we can inject the data in their corresponding positions."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "a = 4\nb = 3\nprint(f'{a} + {b} = {a +b}')\nprint(f'{a} - {b} = {a - b}')\nprint(f'{a} * {b} = {a * b}')\nprint(f'{a} / {b} = {a / b:.2f}')\nprint(f'{a} % {b} = {a % b}')\nprint(f'{a} // {b} = {a // b}')\nprint(f'{a} ** {b} = {a ** b}')"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "python-strings-as-sequences-of-characters"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python Strings as Sequences of Characters"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Python strings are sequences of characters, and share their basic methods of access with other Python ordered sequences of objects â€“ lists and tuples. The simplest way of extracting single characters from strings (and individual members from any sequence) is to unpack them into corresponding variables."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "unpacking-characters"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Unpacking Characters"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "language = 'Python'\na,b,c,d,e,f = language # unpacking sequence characters into variables\nprint(a) # P\nprint(b) # y\nprint(c) # t\nprint(d) # h\nprint(e) # o\nprint(f) # n"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "accessing-characters-in-strings-by-index"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Accessing Characters in Strings by Index"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In programming counting starts from zero. Therefore the first letter of a string is at zero index and the last letter of a string is the length of a string minus one."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "img",
                        "attributes": {
                            "alt": "String index",
                            "src": "../images/string_index.png"
                        }
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "language = 'Python'\nfirst_letter = language[0]\nprint(first_letter) # P\nsecond_letter = language[1]\nprint(second_letter) # y\nlast_index = len(language) - 1\nlast_letter = language[last_index]\nprint(last_letter) # n"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "If we want to start from right end we can use negative indexing. -1 is the last index."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "language = 'Python'\nlast_letter = language[-1]\nprint(last_letter) # n\nsecond_last = language[-2]\nprint(second_last) # o"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "slicing-python-strings"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Slicing Python Strings"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In python we can slice strings into substrings."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "language = 'Python'\nfirst_three = language[0:3] # starts at zero index and up to 3 but not include 3\nprint(first_three) #Pyt\nlast_three = language[3:6]\nprint(last_three) # hon\n# Another way\nlast_three = language[-3:]\nprint(last_three)   # hon\nlast_three = language[3:]\nprint(last_three)   # hon"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "reversing-a-string"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Reversing a String"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "We can easily reverse strings in python."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "greeting = 'Hello, World!'\nprint(greeting[::-1]) # !dlroW ,olleH"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "skipping-characters-while-slicing"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Skipping Characters While Slicing"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "It is possible to skip characters while slicing by passing step argument to slice method."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "language = 'Python'\npto = language[0:6:2] #\nprint(pto) # Pto"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "string-methods"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "String Methods"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "There are many string methods which allow us to format strings. See some of the string methods in the following example:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "capitalize(): Converts the first character of the string to capital letter"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.capitalize()) # 'Thirty days of python'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "count(): returns occurrences of substring in string, count(substring, start=.., end=..). The start is a starting indexing for counting and end is the last index to count."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.count('y')) # 3\nprint(challenge.count('y', 7, 14)) # 1, \nprint(challenge.count('th')) # 2`"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "endswith(): Checks if a string ends with a specified ending"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.endswith('on'))   # True\nprint(challenge.endswith('tion')) # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "expandtabs(): Replaces tab character with spaces, default tab size is 8. It takes tab size argument"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty\\tdays\\tof\\tpython'\nprint(challenge.expandtabs())   # 'thirty  days    of      python'\nprint(challenge.expandtabs(10)) # 'thirty    days      of        python'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "find(): Returns the index of the first occurrence of a substring, if not found returns -1"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.find('y'))  # 5\nprint(challenge.find('th')) # 0"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "rfind(): Returns the index of the last occurrence of a substring, if not found returns -1"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.rfind('y'))  # 16\nprint(challenge.rfind('th')) # 17"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "format(): formats string into a nicer output"
                            },
                            {
                                "type": "Element",
                                "tagName": "br",
                                "attributes": {}
                            },
                            {
                                "type": "Text",
                                "content": "More about string formatting check this"
                            },
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "https://www.programiz.com/python-programming/methods/string/format"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "link"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "first_name = 'Asabeneh'\nlast_name = 'Yetayeh'\nage = 250\njob = 'teacher'\ncountry = 'Finland'\nsentence = 'I am {} {}. I am a {}. I am {} years old. I live in {}.'.format(first_name, last_name, age, job, country)\nprint(sentence) # I am Asabeneh Yetayeh. I am 250 years old. I am a teacher. I live in Finland.\n\nradius = 10\npi = 3.14\narea = pi * radius ** 2\nresult = 'The area of a circle with radius {} is {}'.format(str(radius), str(area))\nprint(result) # The area of a circle with radius 10 is 314"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "index(): Returns the lowest index of a substring, additional arguments indicate starting and ending index (default 0 and string length - 1). If the substring is not found it raises a valueError."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nsub_string = 'da'\nprint(challenge.index(sub_string))  # 7\nprint(challenge.index(sub_string, 9)) # error"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "rindex(): Returns the highest index of a substring, additional arguments indicate starting and ending index (default 0 and string length - 1)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nsub_string = 'da'\nprint(challenge.rindex(sub_string))  # 7\nprint(challenge.rindex(sub_string, 9)) # error\nprint(challenge.rindex('on', 8)) # 19"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isalnum(): Checks alphanumeric character"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'ThirtyDaysPython'\nprint(challenge.isalnum()) # True\n\nchallenge = '30DaysPython'\nprint(challenge.isalnum()) # True\n\nchallenge = 'thirty days of python'\nprint(challenge.isalnum()) # False, space is not an alphanumeric character\n\nchallenge = 'thirty days of python 2019'\nprint(challenge.isalnum()) # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isalpha(): Checks if all string elements are alphabet characters (a-z and A-Z)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.isalpha()) # False, space is once again excluded\nchallenge = 'ThirtyDaysPython'\nprint(challenge.isalpha()) # True\nnum = '123'\nprint(num.isalpha())      # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isdecimal(): Checks if all characters in a string are decimal (0-9)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.isdecimal())  # False\nchallenge = '123'\nprint(challenge.isdecimal())  # True\nchallenge = '\\u00B2'\nprint(challenge.isdigit())   # False\nchallenge = '12 3'\nprint(challenge.isdecimal())  # False, space not allowed"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isdigit(): Checks if all characters in a string are numbers (0-9 and some other unicode characters for numbers)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'Thirty'\nprint(challenge.isdigit()) # False\nchallenge = '30'\nprint(challenge.isdigit())   # True\nchallenge = '\\u00B2'\nprint(challenge.isdigit())   # True"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isnumeric(): Checks if all characters in a string are numbers or number related (just like isdigit(), just accepts more symbols, like Â½)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "num = '10'\nprint(num.isnumeric()) # True\nnum = '\\u00BD' # Â½\nprint(num.isnumeric()) # True\nnum = '10.5'\nprint(num.isnumeric()) # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isidentifier(): Checks for a valid identifier - it checks if a string is a valid variable name"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = '30DaysOfPython'\nprint(challenge.isidentifier()) # False, because it starts with a number\nchallenge = 'thirty_days_of_python'\nprint(challenge.isidentifier()) # True"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "islower(): Checks if all alphabet characters in the string are lowercase"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.islower()) # True\nchallenge = 'Thirty days of python'\nprint(challenge.islower()) # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "isupper(): Checks if all alphabet characters in the string are uppercase"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.isupper()) #  False\nchallenge = 'THIRTY DAYS OF PYTHON'\nprint(challenge.isupper()) # True"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "join(): Returns a concatenated string"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "web_tech = ['HTML', 'CSS', 'JavaScript', 'React']\nresult = ' '.join(web_tech)\nprint(result) # 'HTML CSS JavaScript React'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "web_tech = ['HTML', 'CSS', 'JavaScript', 'React']\nresult = '# '.join(web_tech)\nprint(result) # 'HTML# CSS# JavaScript# React'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "strip(): Removes all given characters starting from the beginning and end of the string"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of pythoonnn'\nprint(challenge.strip('noth')) # 'irty days of py'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "replace(): Replaces substring with a given string"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.replace('python', 'coding')) # 'thirty days of coding'"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "split(): Splits the string, using given string or space as a separator"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.split()) # ['thirty', 'days', 'of', 'python']\nchallenge = 'thirty, days, of, python'\nprint(challenge.split(', ')) # ['thirty', 'days', 'of', 'python']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "title(): Returns a title cased string"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.title()) # Thirty Days Of Python"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "swapcase(): Converts all uppercase characters to lowercase and all lowercase characters to uppercase characters"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.swapcase())   # THIRTY DAYS OF PYTHON\nchallenge = 'Thirty Days Of Python'\nprint(challenge.swapcase())  # tHIRTY dAYS oF pYTHON"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "startswith(): Checks if String Starts with the Specified String"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "challenge = 'thirty days of python'\nprint(challenge.startswith('thirty')) # True\n\nchallenge = '30 days of python'\nprint(challenge.startswith('thirty')) # False"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸŒ• You are an extraordinary person and you have a remarkable potential. You have just completed day 4 challenges and you are four steps a head in to your way to greatness. Now do some exercises for your brain and muscles."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "exercises-day-4"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ’» Exercises - Day 4"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Concatenate the string 'Thirty', 'Days', 'Of', 'Python' to a single string, 'Thirty Days Of Python'."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Concatenate the string 'Coding', 'For' , 'All' to a single string, 'Coding For All'."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Declare a variable named company and assign it to an initial value \"Coding For All\"."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Print the variable company using"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "print()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Print the length of the company string using"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "len()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "method and"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "print()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Change all the characters to uppercase letters using"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "upper()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "method."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Change all the characters to lowercase letters using"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "lower()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "method."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use capitalize(), title(), swapcase() methods to format the value of the string"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding For All"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Cut(slice) out the first word of"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding For All"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "string."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Check if"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding For All"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "string contains a word Coding using the method index, find or other methods."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Replace the word coding in the string 'Coding For All' to Python."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Change Python for Everyone to Python for All using the replace method or other methods."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Split the string 'Coding For All' using space as the separator (split()) ."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\"Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon\" split the string at the comma."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "What is the character at index 0 in the string"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding For All"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "What is the last index of the string"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding For All"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "What character is at index 10 in \"Coding For All\" string."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Create an acronym or an abbreviation for the name 'Python For Everyone'."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Create an acronym or an abbreviation for the name 'Coding For All'."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use index to determine the position of the first occurrence of C in Coding For All."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use index to determine the position of the first occurrence of F in Coding For All."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use rfind to determine the position of the last occurrence of l in Coding For All People."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use index or find to find the position of the first occurrence of the word 'because' in the following sentence: 'You cannot end a sentence with because because because is a conjunction'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use rindex to find the position of the last occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Slice out the phrase 'because because because' in the following sentence: 'You cannot end a sentence with because because because is a conjunction'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Find the position of the first occurrence of the word 'because' in the following sentence: 'You cannot end a sentence with because because because is a conjunction'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Slice out the phrase 'because because because' in the following sentence: 'You cannot end a sentence with because because because is a conjunction'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Does '\\'Coding For All' start with a substring"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Coding"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "?"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Does 'Coding For All' end with a substring"
                            },
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "coding"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "?"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "'Â Â  Coding For All Â Â Â  Â ' Â , remove the left and right trailing spaces in the given string."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Which one of the following variables return True when we use the method isidentifier():"
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Text",
                                                "content": "30DaysOfPython"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Text",
                                                "content": "thirty_days_of_python"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "The following list contains the names of some of python libraries: ['Django', 'Flask', 'Bottle', 'Pyramid', 'Falcon']. Join the list with a hash with space string."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use the new line escape sequence to separate the following sentences."
                            },
                            {
                                "type": "Element",
                                "tagName": "code",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "py\n    I am enjoying this challenge.\n    I just wonder what is next."
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use a tab escape sequence to write the following lines."
                            },
                            {
                                "type": "Element",
                                "tagName": "code",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "py\n    Name      Age     Country   City\n    Asabeneh  250     Finland   Helsinki"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use the string formatting method to display the following:"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-sh"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "radius = 10\narea = 3.14 * radius ** 2\nThe area of a circle with radius 10 is 314 meters square."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Make the following using string formatting methods:"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-sh"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "8 + 6 = 14\n8 - 6 = 2\n8 * 6 = 48\n8 / 6 = 1.33\n8 % 6 = 2\n8 // 6 = 1\n8 ** 6 = 262144"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "|"
                    }
                ]
            }
        ]
    }
}