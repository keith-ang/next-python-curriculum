{
    "day": 18,
    "title": "Regular Expressions",
    "content": {
        "tag": "root",
        "children": [
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Day 18 - Regular Expressions"
                    }
                ]
            },
            
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "img",
                        "attributes": {
                            "alt": "30DaysOfPython",
                            "src": "../images/30DaysOfPython_banner3@2x.png"
                        }
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#-day-18"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ“˜ Day 18"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#regular-expressions"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Regular Expressions"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#the-re-module"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "The"
                                                    },
                                                    {
                                                        "type": "Element",
                                                        "tagName": "em",
                                                        "attributes": {},
                                                        "children": [
                                                            {
                                                                "type": "Text",
                                                                "content": "re"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "Text",
                                                        "content": "Module"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#methods-in-re-module"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Methods in"
                                                    },
                                                    {
                                                        "type": "Element",
                                                        "tagName": "em",
                                                        "attributes": {},
                                                        "children": [
                                                            {
                                                                "type": "Text",
                                                                "content": "re"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "Text",
                                                        "content": "Module"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#match"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Match"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#search"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Search"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#searching-for-all-matches-using-findall"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Searching for All Matches Using"
                                                    },
                                                    {
                                                        "type": "Element",
                                                        "tagName": "em",
                                                        "attributes": {},
                                                        "children": [
                                                            {
                                                                "type": "Text",
                                                                "content": "findall"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#replacing-a-substring"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Replacing a Substring"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#splitting-text-using-regex-split"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Splitting Text Using RegEx Split"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#writing-regex-patterns"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Writing RegEx Patterns"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#square-bracket"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Square Bracket"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#escape-character-in-regex"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Escape character(\\) in RegEx"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#one-or-more-times"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "One or more times(+)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#period"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Period(.)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#zero-or-more-times"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Zero or more times(*)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#zero-or-one-time"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Zero or one time(?)"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#quantifier-in-regex"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Quantifier in RegEx"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#cart-"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Cart ^"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#-exercises-day-18"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ’» Exercises: Day 18"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#exercises-level-1"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Exercises: Level 1"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#exercises-level-2"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Exercises: Level 2"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#exercises-level-3"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Exercises: Level 3"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {
                    "id": "day-18"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ“˜ Day 18"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "regular-expressions"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Regular Expressions"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "A regular expression or RegEx is a special text string that helps to find patterns in data. A RegEx can be used to check if some pattern exists in a different data type. To use RegEx in python first we should import the RegEx module which is called"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "the-re-module"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "The"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "Module"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "After importing the module we can use it to detect or find patterns."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "import re"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "methods-in-re-module"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Methods in"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "Module"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "To find a pattern we use different set of"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "character sets that allows to search for a match in a string."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "re.match()"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": ": searches only in the beginning of the first line of the string and returns matched objects if  found, else returns None."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "re.search"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": ": Returns a match object if there is one anywhere in the string, including multiline strings."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "re.findall"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": ": Returns a list containing all matches"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "re.split"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": ": Takes a string, splits it at the match points, returns a list"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "em",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "re.sub"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": ":  Replaces one or many matches within a string"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "match"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Match"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# syntac\nre.match(substring, string, re.I)\n# substring is a string or a pattern, string is the text we look for a pattern , re.I is case ignore"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "import re\n\ntxt = 'I love to teach python and javaScript'\n# It returns an object with span, and match\nmatch = re.match('I love to teach', txt, re.I)\nprint(match)  # <re.Match object; span=(0, 15), match='I love to teach'>\n# We can get the starting and ending position of the match as tuple using span\nspan = match.span()\nprint(span)     # (0, 15)\n# Lets find the start and stop position from the span\nstart, end = span\nprint(start, end)  # 0, 15\nsubstring = txt[start:end]\nprint(substring)       # I love to teach"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "As you can see from the example above, the pattern we are looking for (or the substring we are looking for) is"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "I love to teach"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ". The match function returns an object"
                    },
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "only"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "if the text starts with the pattern."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "import re\n\ntxt = 'I love to teach python and javaScript'\nmatch = re.match('I like to teach', txt, re.I)\nprint(match)  # None"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "The string does not string with"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "I like to teach"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ", therefore there was no match and the match method returned None."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "search"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Search"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# syntax\nre.match(substring, string, re.I)\n# substring is a pattern, string is the text we look for a pattern , re.I is case ignore flag"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "import re\n\ntxt = '''Python is the most beautiful language that a human being has ever created.\nI recommend python for a first programming language'''\n\n# It returns an object with span and match\nmatch = re.search('first', txt, re.I)\nprint(match)  # <re.Match object; span=(100, 105), match='first'>\n# We can get the starting and ending position of the match as tuple using span\nspan = match.span()\nprint(span)     # (100, 105)\n# Lets find the start and stop position from the span\nstart, end = span\nprint(start, end)  # 100 105\nsubstring = txt[start:end]\nprint(substring)       # first"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "As you can see, search is much better than match because it can look for the pattern throughout the text. Search returns a match object with a first match that was found, otherwise it returns"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "None"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ". A much better"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "function is"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "findall"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ". This function checks for the pattern through the whole string and returns all the matches as a list."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "searching-for-all-matches-using-findall"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Searching for All Matches Using"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "findall"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "findall()"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "returns all the matches as a list"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''Python is the most beautiful language that a human being has ever created.\nI recommend python for a first programming language'''\n\n# It return a list\nmatches = re.findall('language', txt, re.I)\nprint(matches)  # ['language', 'language']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "As you can see, the word"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "language"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "was found two times in the string. Let us practice some more.\nNow we will look for both Python and python words in the string:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''Python is the most beautiful language that a human being has ever created.\nI recommend python for a first programming language'''\n\n# It returns list\nmatches = re.findall('python', txt, re.I)\nprint(matches)  # ['Python', 'python']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Since we are using"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "re.I"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "both lowercase and uppercase letters are included. If we do not have the re.I flag, then we will have to write our pattern differently. Let us check it out:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''Python is the most beautiful language that a human being has ever created.\nI recommend python for a first programming language'''\n\nmatches = re.findall('Python|python', txt)\nprint(matches)  # ['Python', 'python']\n\n#\nmatches = re.findall('[Pp]ython', txt)\nprint(matches)  # ['Python', 'python']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h4",
                "attributes": {
                    "id": "replacing-a-substring"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Replacing a Substring"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''Python is the most beautiful language that a human being has ever created.\nI recommend python for a first programming language'''\n\nmatch_replaced = re.sub('Python|python', 'JavaScript', txt, re.I)\nprint(match_replaced)  # JavaScript is the most beautiful language that a human being has ever created.\n# OR\nmatch_replaced = re.sub('[Pp]ython', 'JavaScript', txt, re.I)\nprint(match_replaced)  # JavaScript is the most beautiful language that a human being has ever created."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Let us add one more example. The following string is really hard to read unless we remove the % symbol. Replacing the % with an empty string will clean the text."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''%I a%m te%%a%%che%r% a%n%d %% I l%o%ve te%ach%ing. \nT%he%re i%s n%o%th%ing as r%ewarding a%s e%duc%at%i%ng a%n%d e%m%p%ow%er%ing p%e%o%ple.\nI fo%und te%a%ching m%ore i%n%t%er%%es%ting t%h%an any other %jobs. \nD%o%es thi%s m%ot%iv%a%te %y%o%u to b%e a t%e%a%cher?'''\n\nmatches = re.sub('%', '', txt)\nprint(matches)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-sh"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "I am teacher and I love teaching.\nThere is nothing as rewarding as educating and empowering people. \nI found teaching more interesting than any other jobs. Does this motivate you to be a teacher?"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "splitting-text-using-regex-split"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Splitting Text Using RegEx Split"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''I am teacher and  I love teaching.\nThere is nothing as rewarding as educating and empowering people.\nI found teaching more interesting than any other jobs.\nDoes this motivate you to be a teacher?'''\nprint(re.split('\\n', txt)) # splitting using \\n - end of line symbol"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-sh"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "['I am teacher and  I love teaching.', 'There is nothing as rewarding as educating and empowering people.', 'I found teaching more interesting than any other jobs.', 'Does this motivate you to be a teacher?']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "writing-regex-patterns"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Writing RegEx Patterns"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "To declare a string variable we use a single or double quote. To declare RegEx variable"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r''"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ".\nThe following pattern only identifies apple with lowercase, to make it case insensitive either we should rewrite our pattern or we should add a flag."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "import re\n\nregex_pattern = r'apple'\ntxt = 'Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. '\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['apple']\n\n# To make case insensitive adding flag '\nmatches = re.findall(regex_pattern, txt, re.I)\nprint(matches)  # ['Apple', 'apple']\n# or we can use a set of characters method\nregex_pattern = r'[Aa]pple'  # this mean the first letter could be Apple or apple\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['Apple', 'apple']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[]:  A set of characters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[a-c] means, a or b or c"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[a-z] means, any letter from a to z"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[A-Z] means, any character from A to Z"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[0-3] means, 0 or 1 or 2 or 3"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[0-9] means any number from 0 to 9"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "[A-Za-z0-9] any single character, that is a to z, A to Z or 0 to 9"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\:  uses to escape special characters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\d means: match where the string contains digits (numbers from 0-9)"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "\\D means: match where the string does not contain digits"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": ". : any character except new line character(\\n)"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "^: starts with"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'^substring' eg r'^love', a sentence that starts with a word love"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'[^abc] means not a, not b, not c."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "$: ends with"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'substring$' eg r'love$', sentence  that ends with a word love"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "*: zero or more times"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'[a]*' means a optional or it can occur many times."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "+: one or more times"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'[a]+' means at least once (or more)"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "?: zero or one time"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'[a]?' means zero times or once"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "{3}: Exactly 3 characters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "{3,}: At least 3 characters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "{3,8}: 3 to 8 characters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "|: Either or"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "r'apple|banana' means either apple or a banana"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "(): Capture and group"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "img",
                        "attributes": {
                            "alt": "Regular Expression cheat sheet",
                            "src": "../images/regex.png"
                        }
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Let us use examples to clarify the meta characters above"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "square-bracket"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Square Bracket"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Let us use square bracket to include lower and upper case"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'[Aa]pple' # this square bracket mean either A or a\ntxt = 'Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away.'\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['Apple', 'apple']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "If we want to look for the banana, we write the pattern as follows:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'[Aa]pple|[Bb]anana' # this square bracket means either A or a\ntxt = 'Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away.'\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['Apple', 'banana', 'apple', 'banana']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Using the square bracket and or operator , we manage to extract Apple, apple, Banana and banana."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "escape-character-in-regex"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Escape character(\\) in RegEx"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'\\d'  # d is a special character which means digits\ntxt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['6', '2', '0', '1', '9', '8', '2', '0', '2', '1'], this is not what we want"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "one-or-more-times"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "One or more times(+)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'\\d+'  # d is a special character which means digits, + mean one or more times\ntxt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['6', '2019', '8', '2021'] - now, this is better!"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "period"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Period(.)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'[a].'  # this square bracket means a and . means any character except new line\ntxt = '''Apple and banana are fruits'''\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['an', 'an', 'an', 'a ', 'ar']\n\nregex_pattern = r'[a].+'  # . any character, + any character one or more times \nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['and banana are fruits']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "zero-or-more-times"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Zero or more times(*)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Zero or many times. The pattern could may not occur or it can occur many times."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "regex_pattern = r'[a].*'  # . any character, * any character zero or more times \ntxt = '''Apple and banana are fruits'''\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['and banana are fruits']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "zero-or-one-time"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Zero or one time(?)"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Zero or one time. The pattern may not occur or it may occur once."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = '''I am not sure if there is a convention how to write the word e-mail.\nSome people write it as email others may write it as Email or E-mail.'''\nregex_pattern = r'[Ee]-?mail'  # ? means here that '-' is optional\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['e-mail', 'email', 'Email', 'E-mail']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "quantifier-in-regex"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Quantifier in RegEx"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "We can specify the length of the substring we are looking for in a text, using a curly bracket. Let us imagine, we are interested in a substring with a length of 4 characters:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nregex_pattern = r'\\d{4}'  # exactly four times\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['2019', '2021']\n\ntxt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nregex_pattern = r'\\d{1, 4}'   # 1 to 4\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['6', '2019', '8', '2021']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "cart"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Cart ^"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Starts with"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nregex_pattern = r'^This'  # ^ means starts with\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['This']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Negation"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "txt = 'This regular expression example was made on December 6,  2019 and revised on July 8, 2021'\nregex_pattern = r'[^A-Za-z ]+'  # ^ in set character means negation, not A to Z, not a to z, no space\nmatches = re.findall(regex_pattern, txt)\nprint(matches)  # ['6,', '2019', '8', '2021']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "exercises-day-18"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ’» Exercises: Day 18"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-1"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 1"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "What is the most frequent word in the following paragraph?"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "paragraph = 'I love teaching. If you do not love teaching what else can you love. I love Python if you do not love something which can give you all the capabilities to develop an application what else can you love."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-sh"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "[\n    (6, 'love'),\n    (5, 'you'),\n    (3, 'can'),\n    (2, 'what'),\n    (2, 'teaching'),\n    (2, 'not'),\n    (2, 'else'),\n    (2, 'do'),\n    (2, 'I'),\n    (1, 'which'),\n    (1, 'to'),\n    (1, 'the'),\n    (1, 'something'),\n    (1, 'if'),\n    (1, 'give'),\n    (1, 'develop'),\n    (1, 'capabilities'),\n    (1, 'application'),\n    (1, 'an'),\n    (1, 'all'),\n    (1, 'Python'),\n    (1, 'If')\n    ]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "The position of some particles on the horizontal x-axis are -12, -4, -3 and -1 in the negative direction, 0 at origin, 4 and 8 in the positive direction. Extract these numbers from this whole text and find the distance between the two furthest particles."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "points = ['-12', '-4', '-3', '-1', '0', '4', '8']\nsorted_points =  [-12, -4, -3, -1, -1, 0, 2, 4, 8]\ndistance = 8 -(-12) # 20"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-2"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 2"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "p",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Write a pattern which identifies if a string is a valid python variable"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "p",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "code",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Text",
                                                "content": "sh\nis_valid_variable('first_name') # True\nis_valid_variable('first-name') # False\nis_valid_variable('1first_name') # False\nis_valid_variable('firstname') # True"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-3"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 3"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "p",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Clean the following text. After cleaning, count three most frequent words in the string."
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "p",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "```py\nsentence = '''%I $am@% a %tea@cher%, &and& I lo%#ve %tea@ching%;. There $is nothing; &as& mo@re rewarding as educa@ting &and& @emp%o@wering peo@ple. ;I found tea@ching m%o@re interesting tha@n any other %jo@bs. %Do@es thi%s mo@tivate yo@u to be a tea@cher!?'''"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "p",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "print(clean_text(sentence));\nI am a teacher and I love teaching There is nothing as more rewarding as educating and empowering people I found teaching more interesting than any other jobs Does this motivate you to be a teacher\nprint(most_frequent_words(cleaned_text)) # [(3, 'I'), (2, 'teaching'), (2, 'teacher')]\n```"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "|"
                    }
                ]
            }
        ]
    }
}