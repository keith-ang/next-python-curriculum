{
    "day": 14,
    "title": "Higher Order Functions",
    "content": {
        "tag": "root",
        "children": [
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Day 14 - Higher Order Functions"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "img",
                        "attributes": {
                            "alt": "30DaysOfPython",
                            "src": "../images/30DaysOfPython_banner3@2x.png"
                        }
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#-day-14"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ“˜ Day 14"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#higher-order-functions"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Higher Order Functions"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#function-as-a-parameter"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Function as a Parameter"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#function-as-a-return-value"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Function as a Return Value"
                                    }
                                ]
                            },
                            {
                                "type": "Element",
                                "tagName": "ul",
                                "attributes": {},
                                "children": [
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#creating-decorators"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Creating Decorators"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "Element",
                                        "tagName": "li",
                                        "attributes": {},
                                        "children": [
                                            {
                                                "type": "Element",
                                                "tagName": "a",
                                                "attributes": {
                                                    "href": "#applying-multiple-decorators-to-a-single-function"
                                                },
                                                "children": [
                                                    {
                                                        "type": "Text",
                                                        "content": "Applying Multiple Decorators to a Single Function"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#-exercises-day-14"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "ðŸ’» Exercises: Day 14"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#exercises-level-1"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Exercises: Level 1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#exercises-level-2"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Exercises: Level 2"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "#exercises-level-3"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "Exercises: Level 3"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h1",
                "attributes": {
                    "id": "day-14"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ“˜ Day 14"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "higher-order-functions"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Higher Order Functions"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In Python functions are treated as first class citizens, allowing you to perform the following operations on functions:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ul",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "A function can take one or more functions as parameters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "A function can be returned as a result of another function"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "A function can be modified"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "A function can be assigned to a variable"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "In this section, we will cover:"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Handling functions as parameters"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Returning functions as return value from another functions"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Using Python closures and decorators"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "function-as-a-parameter"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Function as a Parameter"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "def sum_numbers(nums):  # normal function\n    return sum(nums)    # a sad function abusing the built-in sum function :<\n\ndef higher_order_function(f, lst):  # function as a parameter\n    summation = f(lst)\n    return summation\nresult = higher_order_function(sum_numbers, [1, 2, 3, 4, 5])\nprint(result)       # 15"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "function-as-a-return-value"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Function as a Return Value"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "def square(x):          # a square function\n    return x ** 2\n\ndef cube(x):            # a cube function\n    return x ** 3\n\ndef absolute(x):        # an absolute value function\n    if x >= 0:\n        return x\n    else:\n        return -(x)\n\ndef higher_order_function(type): # a higher order function returning a function\n    if type == 'square':\n        return square\n    elif type == 'cube':\n        return cube\n    elif type == 'absolute':\n        return absolute\n\nresult = higher_order_function('square')\nprint(result(3))       # 9\nresult = higher_order_function('cube')\nprint(result(3))       # 27\nresult = higher_order_function('absolute')\nprint(result(-3))      # 3"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "You can see from the above example that the higher order function is returning different functions depending on the passed parameter"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "python-closures"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python Closures"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Python allows a nested function to access the outer scope of the enclosing function. This is is known as a Closure. Let us have a look at how closures work in Python. In Python, closure is created by nesting a function inside another encapsulating function and then returning the inner function. See the example below."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "def add_ten():\n    ten = 10\n    def add(num):\n        return num + ten\n    return add\n\nclosure_result = add_ten()\nprint(closure_result(5))  # 15\nprint(closure_result(10))  # 20"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "python-decorators"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python Decorators"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "creating-decorators"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Creating Decorators"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "To create a decorator function, we need an outer function with an inner wrapper function."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# Normal function\ndef greeting():\n    return 'Welcome to Python'\ndef uppercase_decorator(function):\n    def wrapper():\n        func = function()\n        make_uppercase = func.upper()\n        return make_uppercase\n    return wrapper\ng = uppercase_decorator(greeting)\nprint(g())          # WELCOME TO PYTHON\n\n## Let us implement the example above with a decorator\n\n'''This decorator function is a higher order function\nthat takes a function as a parameter'''\ndef uppercase_decorator(function):\n    def wrapper():\n        func = function()\n        make_uppercase = func.upper()\n        return make_uppercase\n    return wrapper\n@uppercase_decorator\ndef greeting():\n    return 'Welcome to Python'\nprint(greeting())   # WELCOME TO PYTHON"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "applying-multiple-decorators-to-a-single-function"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Applying Multiple Decorators to a Single Function"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "'''These decorator functions are higher order functions\nthat take functions as parameters'''\n\n# First Decorator\ndef uppercase_decorator(function):\n    def wrapper():\n        func = function()\n        make_uppercase = func.upper()\n        return make_uppercase\n    return wrapper\n\n# Second decorator\ndef split_string_decorator(function):\n    def wrapper():\n        func = function()\n        splitted_string = func.split()\n        return splitted_string\n\n    return wrapper\n\n@split_string_decorator\n@uppercase_decorator     # order with decorators is important in this case - .upper() function does not work with lists\ndef greeting():\n    return 'Welcome to Python'\nprint(greeting())   # WELCOME TO PYTHON"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "accepting-parameters-in-decorator-functions"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Accepting Parameters in Decorator Functions"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Most of the time we need our functions to take parameters, so we might need to define a decorator that accepts parameters."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "def decorator_with_parameters(function):\n    def wrapper_accepting_parameters(para1, para2, para3):\n        function(para1, para2, para3)\n        print(\"I live in {}\".format(para3))\n    return wrapper_accepting_parameters\n\n@decorator_with_parameters\ndef print_full_name(first_name, last_name, country):\n    print(\"I am {} {}. I love to teach.\".format(\n        first_name, last_name, country))\n\nprint_full_name(\"Asabeneh\", \"Yetayeh\",'Finland')"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "built-in-higher-order-functions"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Built-in Higher Order Functions"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "Some of the built-in higher order functions that we cover in this part are"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "map()"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ","
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "filter"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ", and"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "reduce"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": ".\nLambda function can be passed as a parameter and the best use case of lambda functions is in functions like map, filter and reduce."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "python-map-function"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python - Map Function"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "The map() function is a built-in function that takes a function and iterable as parameters."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# syntax\n    map(function, iterable)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:1"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "numbers = [1, 2, 3, 4, 5] # iterable\ndef square(x):\n    return x ** 2\nnumbers_squared = map(square, numbers)\nprint(list(numbers_squared))    # [1, 4, 9, 16, 25]\n# Lets apply it with a lambda function\nnumbers_squared = map(lambda x : x ** 2, numbers)\nprint(list(numbers_squared))    # [1, 4, 9, 16, 25]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:2"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "numbers_str = ['1', '2', '3', '4', '5']  # iterable\nnumbers_int = map(int, numbers_str)\nprint(list(numbers_int))    # [1, 2, 3, 4, 5]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:3"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "names = ['Asabeneh', 'Lidiya', 'Ermias', 'Abraham']  # iterable\n\ndef change_to_upper(name):\n    return name.upper()\n\nnames_upper_cased = map(change_to_upper, names)\nprint(list(names_upper_cased))    # ['ASABENEH', 'LIDIYA', 'ERMIAS', 'ABRAHAM']\n\n# Let us apply it with a lambda function\nnames_upper_cased = map(lambda name: name.upper(), names)\nprint(list(names_upper_cased))    # ['ASABENEH', 'LIDIYA', 'ERMIAS', 'ABRAHAM']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "What actually map does is iterating over a list. For instance, it changes the names to upper case and returns a new list."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "python-filter-function"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python - Filter Function"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "The filter() function calls the specified function which returns boolean for each item of the specified iterable (list). It filters the items that satisfy the filtering criteria."
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# syntax\n    filter(function, iterable)"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:1"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# Lets filter only even nubers\nnumbers = [1, 2, 3, 4, 5]  # iterable\n\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    return False\n\neven_numbers = filter(is_even, numbers)\nprint(list(even_numbers))       # [2, 4]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:2"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "numbers = [1, 2, 3, 4, 5]  # iterable\n\ndef is_odd(num):\n    if num % 2 != 0:\n        return True\n    return False\n\nodd_numbers = filter(is_odd, numbers)\nprint(list(odd_numbers))       # [1, 3, 5]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "# Filter long name\nnames = ['Asabeneh', 'Lidiya', 'Ermias', 'Abraham']  # iterable\ndef is_name_long(name):\n    if len(name) > 7:\n        return True\n    return False\n\nlong_names = filter(is_name_long, names)\nprint(list(long_names))         # ['Asabeneh']"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "python-reduce-function"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Python - Reduce Function"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "The"
                    },
                    {
                        "type": "Element",
                        "tagName": "em",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "reduce()"
                            }
                        ]
                    },
                    {
                        "type": "Text",
                        "content": "function is defined in the functools module and we should import it from this module. Like map and filter it takes two parameters, a function and an iterable. However, it does not return another iterable, instead it returns a single value."
                    },
                    {
                        "type": "Element",
                        "tagName": "strong",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Example:1"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "numbers_str = ['1', '2', '3', '4', '5']  # iterable\ndef add_two_nums(x, y):\n    return int(x) + int(y)\n\ntotal = reduce(add_two_nums, numbers_str)\nprint(total)    # 15"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h2",
                "attributes": {
                    "id": "exercises-day-14"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸ’» Exercises: Day 14"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "pre",
                "attributes": {
                    "className": [
                        "codehilite"
                    ]
                },
                "children": [
                    {
                        "type": "Element",
                        "tagName": "code",
                        "attributes": {
                            "className": [
                                "language-py"
                            ]
                        },
                        "children": [
                            {
                                "type": "Text",
                                "content": "countries = ['Estonia', 'Finland', 'Sweden', 'Denmark', 'Norway', 'Iceland']\nnames = ['Asabeneh', 'Lidiya', 'Ermias', 'Abraham']\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-1"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 1"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Explain the difference between map, filter, and reduce."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Explain the difference between higher order function, closure and decorator"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Define a call function before map, filter or reduce, see examples."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use for loop to print each country in the countries list."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use for to print each name in the names list."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use for to print each number in the numbers list."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-2"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 2"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use map to create a new list by changing each country to uppercase in the countries list"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use map to create a new list by changing each number to its square in the numbers list"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use map to change each name to uppercase in the names list"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use filter to filter out countries containing 'land'."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use filter to filter out countries having exactly six characters."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use filter to filter out countries containing six letters and more in the country list."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use filter to filter out countries starting with an 'E'"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Chain two or more list iterators (eg. arr.map(callback).filter(callback).reduce(callback))"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Declare a function called get_string_lists which takes a list as a parameter and then returns a list containing only string items."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use reduce to sum all the numbers in the numbers list."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use reduce to concatenate all the countries and to produce this sentence: Estonia, Finland, Sweden, Denmark, Norway, and Iceland are north European countries"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Declare a function called categorize_countries that returns a list of countries with some common pattern (you can find the"
                            },
                            {
                                "type": "Element",
                                "tagName": "a",
                                "attributes": {
                                    "href": "https://github.com/Asabeneh/30-Days-Of-Python/blob/master/data/countries.py"
                                },
                                "children": [
                                    {
                                        "type": "Text",
                                        "content": "countries list"
                                    }
                                ]
                            },
                            {
                                "type": "Text",
                                "content": "in this repository as countries.js(eg 'land', 'ia', 'island', 'stan'))."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Create a function returning a dictionary, where keys stand for starting letters of countries and values are the number of country names starting with that letter."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Declare a get_first_ten_countries function - it returns a list of first ten countries from the countries.js list in the data folder."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Declare a get_last_ten_countries function that returns the last ten countries in the countries list."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "h3",
                "attributes": {
                    "id": "exercises-level-3"
                },
                "children": [
                    {
                        "type": "Text",
                        "content": "Exercises: Level 3"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "ol",
                "attributes": {},
                "children": [
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Use the countries_data.py (https://github.com/Asabeneh/30-Days-Of-Python/blob/master/data/countries-data.py) file and follow the tasks below:"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Sort countries by name, by capital, by population"
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Sort out the ten most spoken languages by location."
                            }
                        ]
                    },
                    {
                        "type": "Element",
                        "tagName": "li",
                        "attributes": {},
                        "children": [
                            {
                                "type": "Text",
                                "content": "Sort out the ten most populated countries."
                            }
                        ]
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "ðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰"
                    }
                ]
            },
            {
                "type": "Element",
                "tagName": "p",
                "attributes": {},
                "children": [
                    {
                        "type": "Text",
                        "content": "|"
                    }
                ]
            }
        ]
    }
}